library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use work.all_pkg.all;

entity uart is
    port (
        i_CLOCK       : in  std_logic;
        i_RX          : in  std_logic;
        o_TX          : out std_logic := '1';
        o_DATA_recv   : out std_logic_vector(7 downto 0);
        o_sig_RX_BUSY : out std_logic;
        o_sig_TX_BUSY : out std_logic;
		led1, led2, led3, led4 : out std_logic := '1';
        sevseg_data   : out sevsegdata_arr
    );
end uart;

architecture behavior of uart is

    -- Signals for UART components
    signal r_TX_DATA        : std_logic_vector(7 downto 0) := (others => '1');
    signal s_RX_START       : std_logic := '1';
    signal s_TX_START       : std_logic := '0';
    signal s_RX_BUSY        : std_logic := '0';
    signal s_TX_BUSY        : std_logic := '0';
    signal s_rx_data        : std_logic_vector(7 downto 0);
    signal s_mem            : rgbarr;
    signal s_pixel_receive  : std_logic := '0';
    signal s_pixel_transmit : std_logic := '0';

    -- Control signals
    signal s_reset          : std_logic := '1';
    signal s_RX_ENABLE      : std_logic := '1';
    signal s_TX_ENABLE      : std_logic := '0';
    signal s_idle           : std_logic;

    -- Components
    component uart_tx is
        port (
            i_CLOCK         : in  std_logic;
            i_START         : in  std_logic;
            o_BUSY          : out std_logic;
            i_RGB           : in  rgbarr;
            i_pixel_receive : in  std_logic;
            o_pixel_transmit: out std_logic;
            o_TX_LINE       : out std_logic := '1'
        );
    end component;

    component uart_rx is
        port (
            i_CLOCK         : in  std_logic;
            i_RX            : in  std_logic;
            i_START         : in  std_logic;
            o_DATA          : out std_logic_vector(7 downto 0);
            i_log_ADDR      : in  std_logic_vector(7 downto 0);
            i_pixel_transmit: in  std_logic;
            o_sig_CRRP_DATA : out std_logic := '0';
            o_BUSY          : out std_logic;
            o_pixel_receive : out std_logic;
            o_mem           : out rgbarr
        );
    end component;

    -- component uart_controller is
    --     port (
    --         clk        : in  std_logic;
    --         reset      : in  std_logic := '1';
    --         rx_ready   : in  std_logic;
    --         tx_done    : in  std_logic;
    --         rx_enable  : out std_logic;
    --         tx_enable  : out std_logic;
    --         idle       : out std_logic
    --     );
    -- end component;

	type transferstate is (readytoreceive, received, readytotransmit, transmitted);
	signal curr_state : transferstate := readytoreceive; 
	signal next_state : transferstate;

begin

    -- UART Receiver Instance
    u_RX : uart_rx port map (
        i_CLOCK         => i_CLOCK,
        i_RX            => i_RX,
        i_START         => s_RX_START,
        o_DATA          => s_rx_data,
        i_log_ADDR      => (others => '0'),
        i_pixel_transmit=> s_pixel_transmit,
        o_sig_CRRP_DATA => open,
        o_BUSY          => s_RX_BUSY,
        o_pixel_receive => s_pixel_receive,
        o_mem           => s_mem
    );

    -- UART Transmitter Instance
    u_TX : uart_tx port map (
        i_CLOCK         => i_CLOCK,
        i_START         => s_TX_START,
        o_BUSY          => s_TX_BUSY,
        i_RGB           => s_mem,
        i_pixel_receive => s_pixel_receive,
        o_pixel_transmit=> s_pixel_transmit,
        o_TX_LINE       => o_TX
    );

    -- UART Controller Instance
    -- u_Control : uart_controller port map (
    --     clk        => i_CLOCK,
    --     reset      => s_reset,
    --     rx_ready   => s_pixel_receive,
    --     tx_done    => s_pixel_transmit,
    --     rx_enable  => s_RX_ENABLE,
    --     tx_enable  => s_TX_ENABLE,
    --     idle       => s_idle
    -- );

    -- Control RX and TX start signals based on controller outputs
    -- process(i_CLOCK)
    -- begin
    --     if rising_edge(i_CLOCK) then
    --         if s_RX_ENABLE = '1' then
    --             s_RX_START <= '1';
    --             s_TX_START <= '0';
	-- 			led1 <= '0';
	-- 			led2 <= '1';
	-- 			if (s_pixel_receive = '1') then
	-- 				s_reset <= '0';
	-- 			end if;
    --         elsif s_TX_ENABLE = '1' then
    --             s_TX_START <= '1';
    --             s_RX_START <= '0';
	-- 			led1 <= '1';
	-- 			led2 <= '0';
	-- 			if (s_pixel_transmit = '1') then
	-- 				-- s_reset <= '0';
	-- 				s_TX_START <= '0';
	-- 			end if;
    --         else
    --             s_RX_START <= '0';
    --             s_TX_START <= '0';
	-- 			led1 <= '1';
	-- 			led2 <= '1';
	-- 			-- led3 <= '0';
	-- 			-- led4 <= '0';
    --         end if;
    --     end if;
    -- end process;

	process(i_CLOCK) 
  	begin
		if rising_edge(i_CLOCK) then
			curr_state <= next_state;
		end if;
	end process;

	process(curr_state, s_pixel_receive, s_pixel_transmit)
  	begin
		next_state <= curr_state;
		s_TX_START <= '0';
		s_RX_START <= '0';
		case curr_state is
			when readytoreceive =>
				led1 <= '0';
				led2 <= '0';

				s_TX_START <= '0';
				-- s_RX_START <= '1';
				if (s_pixel_receive = '1') and (s_pixel_transmit = '0') then
					next_state <= received;
				end if;

			when received =>
				led1 <= '0';
				led2 <= '1';
				next_state <= readytotransmit;

			when readytotransmit =>
				led1 <= '1';
				led2 <= '1';
				if s_TX_BUSY = '0' then
					s_TX_START <= '1';
					s_RX_START <= '0';
				else
					s_TX_START <= '0';
				end if;

				if s_pixel_transmit = '1' then
					next_state <= transmitted;
				end if;

			when transmitted => 
				led1 <= '1';
				led2 <= '0';
				next_state <= readytoreceive;
		end case;
	end process;

	led3 <= s_pixel_receive;
	led4 <= s_pixel_transmit;
	
    -- Output Assignments
    o_DATA_recv   <= s_rx_data;
    o_sig_RX_BUSY <= s_RX_BUSY;
    o_sig_TX_BUSY <= s_TX_BUSY;
    sevseg_data   <= (
        0,
        (s_mem(0) / 100) mod 10,
        (s_mem(0) / 10) mod 10,
        (s_mem(0) / 1) mod 10
    );

end behavior;
